# docker-compose.yml
# Sets the Docker Compose file format version for compatibility
version: '3.8'

# Defines all the containers that will be created and managed
services:
  #  # PostgreSQL database container for storing chat history and user data
  #  db:
  #    # Uses official PostgreSQL image from Docker Hub
  #    image: postgres:15-alpine
  #    # Custom name for database container
  #    container_name: mini-chatbot-db
  #    # Exposes database port to host
  #    ports:
  #      - "5432:5432"
  #    # Database configuration environment variables
  #    environment:
  #      - POSTGRES_DB=chatbot_db
  #      - POSTGRES_USER=chatbot_user
  #      - POSTGRES_PASSWORD=chatbot_password
  #    # Persistent storage for database data
  #    volumes:
  #      - postgres_data:/var/lib/postgresql/data
  #      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
  #    # Connects to shared network
  #    networks:
  #      - chatbot-network
  #    # Restart policy for database
  #    restart: unless-stopped
  #
  #  # Ollama service for running Llama LLM models locally
  #  llama:
  #    # Uses official Ollama image for LLM inference
  #    image: ollama/ollama:latest
  #    # Custom name for LLM container
  #    container_name: mini-chatbot-llama
  #    # Exposes Ollama API port
  #    ports:
  #      - "11434:11434"
  #    # Persistent storage for downloaded models
  #    volumes:
  #      - ollama_data:/root/.ollama
  #    # Connects to shared network
  #    networks:
  #      - chatbot-network
  #    # Restart policy for LLM service
  #    restart: unless-stopped
  #
  #  # Configures the Node.js backend API server container
  #  backend:
  #    # Tells Docker to build a custom image from source code
  #    build:
  #      context: ./backend
  #      dockerfile: Dockerfile
  #    # Sets custom container name for easier identification
  #    container_name: mini-chatbot-backend
  #    # Exposes container ports to host machine - maps host:container
  #    ports:
  #      - "5000:5000"
  #    # Sets environment variables that the application uses at runtime
  #    environment:
  #      - NODE_ENV=development
  #      - PORT=5000
  #      - DB_HOST=db
  #      - DB_PORT=5432
  #      - DB_NAME=chatbot_db
  #      - DB_USER=chatbot_user
  #      - DB_PASSWORD=chatbot_password
  #      - LLAMA_API_URL=http://llama:11434
  #    # Mounts host directories into container for live code sync
  #    volumes:
  #      - ./backend:/app
  #      - /app/node_modules
  #    # Connects container to custom network for service communication
  #    networks:
  #      - chatbot-network
  #    # Ensures backend starts after database and LLM are ready
  #    depends_on:
  #      - db
  #      - llama
  #    # Auto-restart policy - restarts if crashed (except manual stops)
  #    restart: unless-stopped
  #    # Overrides container startup command to run in development mode
  #    entrypoint: ["npm", "run", "dev"]

  # Configures the React frontend web application container
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mini-chatbot-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:5000
      - GENERATE_SOURCEMAP=false
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=100
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - chatbot-network
    restart: unless-stopped
networks:
  chatbot-network:
    driver: bridge
volumes:
  postgres_data:          # Persistent storage for PostgreSQL database
  ollama_data:           # Persistent storage for Llama models
  backend_node_modules:  # Persistent storage for backend dependencies
  frontend_node_modules: # Persistent storage for frontend dependencies
